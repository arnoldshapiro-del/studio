/**
 * @fileoverview Firestore Security Rules for WellTrack Daily.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each user can only
 * access data under their own user ID.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for various
 * log types (medicationLogs, injectionLogs, etc.). User profile data is stored
 * at /users/{userId}/userProfile.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized data access.
 * - All write operations are validated against the authenticated user's ID
 *   to ensure ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for reads and writes.
     * @path /users/{userId}/userProfile
     * @allow (get) Authenticated user with matching userId can read their profile.
     * @allow (create) Authenticated user with matching userId can create their profile.
     * @allow (update) Authenticated user with matching userId can update their profile.
     * @allow (delete) Authenticated user with matching userId can delete their profile.
     * @deny (get) Authenticated user with non-matching userId cannot read another user's profile.
     * @deny (create) Authenticated user with non-matching userId cannot create a profile for another user.
     * @deny (update) Authenticated user with non-matching userId cannot update another user's profile.
     * @deny (delete) Authenticated user with non-matching userId cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfile {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for medication log entries.
     * @path /users/{userId}/medicationLogs/{medicationLogId}
     * @allow (get) Authenticated user with matching userId can read their medication log entries.
     * @allow (create) Authenticated user with matching userId can create medication log entries.
     * @allow (update) Authenticated user with matching userId can update their medication log entries.
     * @allow (delete) Authenticated user with matching userId can delete their medication log entries.
     * @deny (get) Authenticated user with non-matching userId cannot read another user's medication log entries.
     * @deny (create) Authenticated user with non-matching userId cannot create medication log entries for another user.
     * @deny (update) Authenticated user with non-matching userId cannot update another user's medication log entries.
     * @deny (delete) Authenticated user with non-matching userId cannot delete another user's medication log entries.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/medicationLogs/{medicationLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for injection log entries.
     * @path /users/{userId}/injectionLogs/{injectionLogId}
     * @allow (get) Authenticated user with matching userId can read their injection log entries.
     * @allow (create) Authenticated user with matching userId can create injection log entries.
     * @allow (update) Authenticated user with matching userId can update their injection log entries.
     * @allow (delete) Authenticated user with matching userId can delete their injection log entries.
     * @deny (get) Authenticated user with non-matching userId cannot read another user's injection log entries.
     * @deny (create) Authenticated user with non-matching userId cannot create injection log entries for another user.
     * @deny (update) Authenticated user with non-matching userId cannot update another user's injection log entries.
     * @deny (delete) Authenticated user with non-matching userId cannot delete another user's injection log entries.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/injectionLogs/{injectionLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for water intake log entries.
     * @path /users/{userId}/waterIntakeLogs/{waterIntakeLogId}
     * @allow (get) Authenticated user with matching userId can read their water intake log entries.
     * @allow (create) Authenticated user with matching userId can create water intake log entries.
     * @allow (update) Authenticated user with matching userId can update their water intake log entries.
     * @allow (delete) Authenticated user with matching userId can delete their water intake log entries.
     * @deny (get) Authenticated user with non-matching userId cannot read another user's water intake log entries.
     * @deny (create) Authenticated user with non-matching userId cannot create water intake log entries for another user.
     * @deny (update) Authenticated user with non-matching userId cannot update another user's water intake log entries.
     * @deny (delete) Authenticated user with non-matching userId cannot delete another user's water intake log entries.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/waterIntakeLogs/{waterIntakeLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for treadmill workout log entries.
     * @path /users/{userId}/treadmillWorkoutLogs/{treadmillWorkoutLogId}
     * @allow (get) Authenticated user with matching userId can read their treadmill workout log entries.
     * @allow (create) Authenticated user with matching userId can create treadmill workout log entries.
     * @allow (update) Authenticated user with matching userId can update their treadmill workout log entries.
     * @allow (delete) Authenticated user with matching userId can delete their treadmill workout log entries.
     * @deny (get) Authenticated user with non-matching userId cannot read another user's treadmill workout log entries.
     * @deny (create) Authenticated user with non-matching userId cannot create treadmill workout log entries for another user.
     * @deny (update) Authenticated user with non-matching userId cannot update another user's treadmill workout log entries.
     * @deny (delete) Authenticated user with non-matching userId cannot delete another user's treadmill workout log entries.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/treadmillWorkoutLogs/{treadmillWorkoutLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for resistance training log entries.
     * @path /users/{userId}/resistanceTrainingLogs/{resistanceTrainingLogId}
     * @allow (get) Authenticated user with matching userId can read their resistance training log entries.
     * @allow (create) Authenticated user with matching userId can create resistance training log entries.
     * @allow (update) Authenticated user with matching userId can update their resistance training log entries.
     * @allow (delete) Authenticated user with matching userId can delete their resistance training log entries.
     * @deny (get) Authenticated user with non-matching userId cannot read another user's resistance training log entries.
     * @deny (create) Authenticated user with non-matching userId cannot create resistance training log entries for another user.
     * @deny (update) Authenticated user with non-matching userId cannot update another user's resistance training log entries.
     * @deny (delete) Authenticated user with non-matching userId cannot delete another user's resistance training log entries.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/resistanceTrainingLogs/{resistanceTrainingLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}