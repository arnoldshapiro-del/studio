/**
 * @description This ruleset enforces a strict user-ownership model for all data. Each user can only access their own data.
 * @dataStructure All user data is nested under `/users/{userId}/data/{docId}`, where `{userId}` is the authenticated user's UID.
 * @keySecurityDecisions
 *   - Users can only read and write their own data.
 *   - Data schema is not strictly enforced during this prototyping phase.
 * @denormalizationForAuthorization N/A - Simple ownership model doesn't require denormalization.
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user-specific data documents.
     * @path /users/{userId}/data/{docId}
     * @allow (get) User with UID 'Me490f3NGoNLBa0Y0So7r33ktlj1' can read their data document at /users/Me490f3NGoNLBa0Y0So7r33ktlj1/data/latest.
     * @allow (create) User with UID 'Me490f3NGoNLBa0Y0So7r33ktlj1' can create a data document at /users/Me490f3NGoNLBa0Y0So7r33ktlj1/data/someId.
     * @allow (update) User with UID 'Me490f3NGoNLBa0Y0So7r33ktlj1' can update their data document at /users/Me490f3NGoNLBa0Y0So7r33ktlj1/data/latest.
     * @allow (delete) User with UID 'Me490f3NGoNLBa0Y0So7r33ktlj1' can delete their data document at /users/Me490f3NGoNLBa0Y0So7r33ktlj1/data/latest.
     * @deny (get) User with UID 'otherUser' cannot read data document at /users/Me490f3NGoNLBa0Y0So7r33ktlj1/data/latest.
     * @deny (create) User with UID 'otherUser' cannot create a data document at /users/Me490f3NGoNLBa0Y0So7r33ktlj1/data/someId.
     * @deny (update) User with UID 'otherUser' cannot update data document at /users/Me490f3NGoNLBa0Y0So7r33ktlj1/data/latest.
     * @deny (delete) User with UID 'otherUser' cannot delete data document at /users/Me490f3NGoNLBa0Y0So7r33ktlj1/data/latest.
     * @principle Enforces document ownership for all data access.
     */
    match /users/{userId}/data/{docId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}