/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user has exclusive access to their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}/data/{docId}.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data.
 * - Listing user documents is allowed only for the owning user.
 * - Data validation is minimized in the prototyping phase to allow for rapid iteration. Only authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 *  - The user ID is implicitly denormalized into the path `/users/{userId}/...`, which is then validated against `request.auth.uid`.
 *
 * Structural Segregation:
 *  - All user data is stored under the /users/{userId} path, ensuring clear separation and simplified security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user data documents.
     * @path /users/{userId}/data/{docId}
     * @allow (create) - User 'Me490f3NGoNLBa0Y0So7r33ktlj1' can create a document at /users/Me490f3NGoNLBa0Y0So7r33ktlj1/data/latest.
     * @deny (create) - User 'OtherUser' cannot create a document at /users/Me490f3NGoNLBa0Y0So7r33ktlj1/data/latest.
     * @allow (get, list) - User 'Me490f3NGoNLBa0Y0So7r33ktlj1' can read data at /users/Me490f3NGoNLBa0Y0So7r33ktlj1/data/latest.
     * @deny (get, list) - User 'OtherUser' cannot read data at /users/Me490f3NGoNLBa0Y0So7r33ktlj1/data/latest.
     * @allow (update, delete) - User 'Me490f3NGoNLBa0Y0So7r33ktlj1' can update/delete data at /users/Me490f3NGoNLBa0Y0So7r33ktlj1/data/latest.
     * @deny (update, delete) - User 'OtherUser' cannot update/delete data at /users/Me490f3NGoNLBa0Y0So7r33ktlj1/data/latest.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/data/{docId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requested user ID matches the authenticated user's ID.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner and the document exists.
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      // Allow reads (get and list) by the owner.
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Allow create only if the user is the owner. Also, enforce that the userId matches the path.
      allow create: if isOwner(userId);

      // Allow update and delete only if the user is the existing owner.
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}